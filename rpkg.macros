#!/bin/bash

# backward compat since cached function went away
# https://pagure.io/rpkg-util/c/bb62554c62fd52224709e861c2353a5c15b50220?branch=master
function cached {
  declare v=${OUTPUT[$1]}
  [[ -n $v ]] && echo -n "$v"
}

function git_version {
  cached git_version && return

  declare describe tag commits hash

  # Must describe origin/master instead of master, because COPR build system
  # doesn't have a tracking branch.
  describe=$(git describe --long origin/master)
  read tag commits hash <<<"${describe//-/ }"

  # git describe prepends "g" to hash to indiciate git. We could leave it, or
  # replace it with "git" per rpm documentation, but we just remove it so that
  # the hash is easy to cut and paste.
  hash=${hash#g}

  # Sanity checks
  [[ $tag =~ ^[0-9]+[.] ]] || abort "failed to parse tag from $describe"
  (( $commits )) || abort "failed to parse commit count from $describe"
  (( 0x$hash )) || abort "failed to parse hash from $describe"

  # 0.5.2^12.e2a3ead
  output "$tag^$commits.$hash"
}

function git_revision {
  cached git_revision && return

  # Find last merge to copr branch.
  declare last_merge rest
  read last_merge rest <<<"$(git log --merges --oneline -n1)"
  [[ -n $last_merge ]] || abort "failed to find last merge"

  # Count commits since last merge, might be zero.
  declare count
  count=$(git log --oneline HEAD "^$last_merge" | wc -l)

  output "$((count + 1))"
}

function git_changelog_date {
  cached git_changelog_date && return
  output "$(date +'%a %b %d %Y')"
}

function git_changelog_version {
  cached git_changelog_version && return
  git_version &>/dev/null # cache
  git_revision &>/dev/null # cache
  output "$(git_version)-$(git_revision)"
}

function abort {
  echo "ABORT: $*" >&2
  exit 1
}
